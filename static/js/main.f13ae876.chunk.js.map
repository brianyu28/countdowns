{"version":3,"sources":["store/countdowns.ts","store/store.ts","components/Countdown.tsx","containers/Countdown.tsx","components/App.tsx","containers/App.tsx","reportWebVitals.js","index.js"],"names":["storageCountdowns","localStorage","getItem","initialCountdowns","JSON","parse","searchParams","URLSearchParams","window","location","search","paramName","get","paramTime","paramTimeNum","parseInt","isNaN","exists","some","countdown","name","time","console","log","push","initialState","now","Date","getTime","countdowns","countdownsSlice","createSlice","reducers","addCountdown","state","action","payload","deleteCountdown","index","splice","reorderCountdown","start","end","result","Array","from","removed","updateCountdownName","updateCountdownDate","updateNow","actions","selectCountdowns","selectNow","store","configureStore","reducer","countdownsReducer","useAppDispatch","useDispatch","MILLISECONDS_PER_SECOND","MILLISECONDS_PER_MINUTE","SECONDS_PER_MINUTE","MILLISECONDS_PER_HOUR","MINUTES_PER_HOUR","MILLISECONDS_PER_DAY","HOURS_PER_DAY","Countdown","props","handleDelete","handleDateChange","handleNameChange","date","remaining","DateInput","forwardRef","ref","onClick","value","className","html","onChange","event","target","tagName","inFuture","Math","abs","days","floor","hours","minutes","seconds","totalTime","timeRemainingString","selected","timeInputLabel","dateFormat","showTimeInput","customInput","CountdownContainer","useSelector","dispatch","App","onCreateCountdown","onReorderCountdown","onDragEnd","source","destination","droppableId","provided","snapshot","droppableProps","innerRef","style","isDraggingOver","map","i","draggableId","toString","draggableProps","dragHandleProps","isDragging","draggableStyle","background","placeholder","AppContainer","useEffect","interval","setInterval","clearInterval","setItem","stringify","setHours","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f13ae876.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from './store';\n\nexport interface CountdownDetails {\n  name: string,\n  time: number\n}\n\ntype CountdownsState = {\n  now: number,\n  countdowns: CountdownDetails[];\n}\n\n// Get initial countdowns from storage if they exist\nconst storageCountdowns = localStorage.getItem('countdowns');\nconst initialCountdowns = storageCountdowns !== null ? JSON.parse(storageCountdowns) : [];\n\n// Check URL parameters for an initial countdown to add\nconst searchParams = new URLSearchParams(window.location.search);\nconst paramName = searchParams.get('name');\nconst paramTime = searchParams.get('time');\nif (paramName && paramTime) {\n  const paramTimeNum = parseInt(paramTime);\n  if (!isNaN(paramTimeNum)) {\n    const exists = initialCountdowns.some((countdown: CountdownDetails) => {\n      return countdown.name === paramName && countdown.time === paramTimeNum\n    });\n    console.log(exists);\n    if (!exists) {\n      initialCountdowns.push({ name: paramName, time: paramTimeNum });\n    }\n  }\n}\n\nconst initialState: CountdownsState = {\n  now: new Date().getTime(),\n  countdowns: initialCountdowns,\n};\n\nconst countdownsSlice = createSlice({\n  name: 'countdowns',\n  initialState,\n  reducers: {\n    addCountdown(state, action: PayloadAction<CountdownDetails>) {\n      const { name, time } = action.payload;\n      state.countdowns.push({ name, time });\n    },\n    deleteCountdown(state, action: PayloadAction<{index: number}>) {\n      const { index } = action.payload;\n       state.countdowns.splice(index, 1);\n    },\n    reorderCountdown(state, action: PayloadAction<{start: number, end: number}>) {\n      const { start, end } = action.payload;\n      const result = Array.from(state.countdowns);\n      const [removed] = result.splice(start, 1);\n      result.splice(end, 0, removed);\n      state.countdowns = result;\n    },\n    updateCountdownName(state, action: PayloadAction<{index: number, name: string}>) {\n      const { index, name } = action.payload;\n      state.countdowns[index].name = name;\n    },\n    updateCountdownDate(state, action: PayloadAction<{index: number, time: number}>) {\n      const { index, time } = action.payload;\n      state.countdowns[index].time = time;\n    },\n    updateNow(state, action: PayloadAction<{now: number}>) {\n      const { now } = action.payload;\n      state.now = now;\n    },\n  }\n});\n\nexport const { addCountdown, deleteCountdown, reorderCountdown, updateCountdownName, updateCountdownDate, updateNow } = countdownsSlice.actions;\n\nexport const selectCountdowns = (state: RootState): CountdownDetails[] => state.countdowns.countdowns;\nexport const selectNow = (state: RootState): number => state.countdowns.now;\n\nexport default countdownsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\n\nimport countdownsReducer from './countdowns';\n\nconst store = configureStore({\n  reducer: {\n    countdowns: countdownsReducer\n  }\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport default store;","import DatePicker from 'react-datepicker';\nimport ContentEditable from 'react-contenteditable';\n\nimport './Countdown.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { forwardRef } from 'react';\n\ninterface CountdownProps {\n  name: string,\n  date: Date,\n  handleDelete: () => void,\n  handleNameChange: (name: string) => void,\n  handleDateChange: (date: Date) => void,\n  remaining: number\n}\n\n// Time constants\nconst MILLISECONDS_PER_SECOND = 1000;\nconst SECONDS_PER_MINUTE = 60;\nconst MINUTES_PER_HOUR = 60;\nconst HOURS_PER_DAY = 24;\n\nconst MILLISECONDS_PER_MINUTE = SECONDS_PER_MINUTE * MILLISECONDS_PER_SECOND;\nconst MILLISECONDS_PER_HOUR = MINUTES_PER_HOUR * MILLISECONDS_PER_MINUTE;\nconst MILLISECONDS_PER_DAY = HOURS_PER_DAY * MILLISECONDS_PER_HOUR;\n\nconst Countdown = (props: CountdownProps) => {\n\n  let { handleDelete, handleDateChange, handleNameChange, name, date, remaining } = props;\n\n  const changeName = (event: any) => {\n    handleNameChange(event.target.value);\n  }\n\n  const timeRemainingString = (remaining: number) : string => {\n    const inFuture : boolean = remaining > 0;\n    remaining = Math.abs(remaining);\n\n    // Calculate days, hours, minutes, seconds\n    const days : number = Math.floor(remaining / MILLISECONDS_PER_DAY);\n    remaining -= days * MILLISECONDS_PER_DAY;\n    const hours : number = Math.floor(remaining / MILLISECONDS_PER_HOUR);\n    remaining -= hours * MILLISECONDS_PER_HOUR;\n    const minutes : number = Math.floor(remaining / MILLISECONDS_PER_MINUTE);\n    remaining -= minutes * MILLISECONDS_PER_MINUTE;\n    const seconds : number = Math.floor(remaining / MILLISECONDS_PER_SECOND);\n    remaining -= seconds * MILLISECONDS_PER_SECOND;\n\n    // Construct time string\n    let totalTime = '';\n    if (days > 0) {\n      totalTime += `${days} day${days === 1 ? '' : 's'}, `;\n    }\n    if (hours > 0 || totalTime !== '') {\n      totalTime += `${hours} hour${hours === 1 ? '' : 's'}, `;\n    }\n    if (minutes > 0 || totalTime !== '') {\n      totalTime += `${minutes} minute${minutes === 1 ? '' : 's'}, `;\n    }\n    if (seconds > 0 || totalTime !== '') {\n      totalTime += `${seconds} second${seconds === 1 ? '' : 's'}`;\n    }\n\n    if (totalTime === '') {\n      return 'now';\n    } else if (inFuture) {\n      return `in ${totalTime}`;\n    } else {\n      return `${totalTime} ago`;\n    }\n  }\n\n  const DateInput = forwardRef(\n    (props, ref) => {\n      const { onClick, value } = props as any;\n      return (\n        <button className='date-button' onClick={onClick} ref={ref as any}>\n          {value}\n        </button>\n      );\n    }\n  );\n\n  return (\n    <div className='countdown'>\n      <div>\n        <ContentEditable html={name} onChange={changeName} tagName='h1' />\n        <h2>{timeRemainingString(remaining)}</h2>\n      </div>\n      <div>\n        <DatePicker\n          selected={date}\n          onChange={date => handleDateChange(date as Date)}\n          timeInputLabel=\"Time:\"\n          dateFormat=\"MM/dd/yyyy h:mm aa\"\n          showTimeInput={true}\n          customInput={<DateInput />}\n        />\n      </div>\n      <button className='countdown-delete' onClick={handleDelete}>X</button>\n    </div>\n  );\n};\n\nexport default Countdown;","import { useSelector } from 'react-redux'\n\nimport { CountdownDetails, deleteCountdown, selectNow, updateCountdownDate, updateCountdownName } from '../store/countdowns';\nimport Countdown from '../components/Countdown';\nimport { useAppDispatch } from '../store/store';\n\ninterface CountdownContainerProps {\n  index: number,\n  countdown: CountdownDetails\n};\n\nconst CountdownContainer = (props: CountdownContainerProps) => {\n  let { index, countdown } = props;\n\n  const now = useSelector(selectNow);\n  const dispatch = useAppDispatch();\n\n  const date = new Date(countdown.time);\n\n  const handleNameChange = (name: string) => {\n    dispatch(updateCountdownName({ index, name }));\n  }\n\n  const handleDateChange = (date: Date | null) => {\n    if (date === null) {\n      return;\n    }\n    dispatch(updateCountdownDate({ index, time: date.getTime() }));\n  }\n\n  const handleDelete = () => {\n    dispatch(deleteCountdown({ index }));\n  }\n\n  return (\n    <Countdown\n      name={countdown.name}\n      date={date}\n      handleDelete={handleDelete}\n      handleNameChange={handleNameChange}\n      handleDateChange={handleDateChange}\n      remaining={date.getTime() - now}\n    />\n  )\n};\n\nexport default CountdownContainer;\n\n","\nimport './App.css';\n\nimport Countdown from '../containers/Countdown';\nimport { CountdownDetails } from '../store/countdowns';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\ninterface AppProps {\n  countdowns: CountdownDetails[],\n  onCreateCountdown: () => void,\n  onReorderCountdown: (start: number, end: number) => void,\n}\n\nconst App = (props: AppProps) => {\n  const { countdowns, onCreateCountdown, onReorderCountdown } = props;\n\n  const getListStyle = (_isDraggingOver: boolean) => ({\n  });\n\n  const getItemStyle = (isDragging: boolean, draggableStyle: any) => {\n    return {\n      background: isDragging ? '#c0c7d1' : '#e1e9f7',\n      ...draggableStyle,\n    };\n  }\n\n  const onDragEnd = (result: any) => {\n    onReorderCountdown(result.source.index, result.destination.index);\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={onCreateCountdown}>Add Countdown</button>\n      </div>\n      <div>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId='droppable'>\n            {(provided, snapshot) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {countdowns.map((countdown, i) => \n                  <Draggable key={i} draggableId={i.toString()} index={i}>\n                    {(provided, snapshot) => (\n                      <div\n                        className='countdown-container'\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n                      >\n                        <Countdown\n                          index={i}\n                          countdown={countdown}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                )}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  )\n};\n\nexport default App;\n","import { useEffect } from 'react';\nimport { useSelector } from 'react-redux'\n\n\nimport App from '../components/App';\nimport { addCountdown, reorderCountdown, selectCountdowns, updateNow } from '../store/countdowns';\nimport { useAppDispatch } from '../store/store';\n\nconst AppContainer = () => {\n\n  const countdowns = useSelector(selectCountdowns);\n  const dispatch = useAppDispatch();\n\n  // Update time every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(\n        updateNow({\n          now: new Date().getTime()\n        })\n      )\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  // Store data in local storage\n  useEffect(() => {\n    localStorage.setItem('countdowns', JSON.stringify(countdowns));\n  }, [countdowns]);\n\n  const handleCreateCountdown = () => {\n\n    // Calculate tomorrow's date\n    const date = new Date();\n    date.setHours(24, 0, 0, 0);\n\n    dispatch(\n      addCountdown({\n        name: 'New Countdown',\n        time: date.getTime(),\n      })\n    )\n\n  };\n\n  const handleReorderCountdown = (start: number, end: number) => {\n    dispatch(reorderCountdown({ start, end }))\n  };\n\n  return <App\n    countdowns={countdowns}\n    onCreateCountdown={handleCreateCountdown}\n    onReorderCountdown={handleReorderCountdown}\n  />;\n};\n\nexport default AppContainer;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}